name: Deploy Docs (sans re-commit dans main)

on:
  push:
    branches: [main]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: üõ†Ô∏è Install MkDocs & plugins
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocs-material pyodide-mkdocs-theme mkdocs-awesome-pages-plugin mkdocs-open-in-new-tab python-semantic-release build

      - name: Run semantic-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release -vv version
          # semantic-release changelog
          semantic-release publish

      - name: G√©n√©rer le changelog personnalis√©
        run: python resources/generate_changelog.py

      - name: üìã G√©n√®re deploy_info.md
        env:
          SHA: ${{ github.sha }}
        run: |
          DEPLOY_INFO_DIR="docs/outils/logs"
          DEPLOY_INFO_FILE="deploy_info.md"
          DEPLOY_INFO_PATH="$DEPLOY_INFO_DIR/$DEPLOY_INFO_FILE"

          mkdir -p "$DEPLOY_INFO_DIR"


          LAST_COMMIT_MSG="$(git log -1 --pretty=%B)"

          if [[ "$LAST_COMMIT_MSG" =~ ^Merge.*github\.io$ ]]; then

            PREV_SHA="$(git rev-parse HEAD^)"
            MSG="$(git show -s --format=%B "$PREV_SHA")<br>*([This commit has since been merged](https://github.com/PyMoX-fr/PyMoX-fr.github.io/commits/main))*"
            AUTOR="$(git show -s --format=%an "$PREV_SHA")"
            
            DATE_HUMAN="$(TZ='Europe/Paris' date -d "$(git show -s --format=%ci "$PREV_SHA")" '+%d/%m/%Y')"
            TIME_HUMAN="$(TZ='Europe/Paris' date -d "$(git show -s --format=%ci "$PREV_SHA")" '+%H:%M:%S')"
            DATE_ISO="$(date -u -d "$(git show -s --format=%ci "$PREV_SHA")" '+%Y-%m-%dT%H:%M:%SZ')"
            DATE_UNIX="$(date -d "$(git show -s --format=%ci "$PREV_SHA")" '+%s')"

            # # Fallback si MSG vide
            # if [[ -z "$MSG" ]]; then
            #   echo "‚ö†Ô∏è Le message du commit pr√©c√©dent est vide !"
            #   MSG="[commit pr√©c√©dent vide ou inaccessible]"
            # fi
          else
            MSG="$LAST_COMMIT_MSG"
            AUTOR="$(git log -1 --pretty=%an)"
            DATE_HUMAN="$(TZ='Europe/Paris' date '+%d/%m/%Y')"
            TIME_HUMAN="$(TZ='Europe/Paris' date '+%H:%M:%S')"
            DATE_ISO="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
            DATE_UNIX="$(date +%s)"
          fi

          # SHA="${{ github.sha }}"

          echo "" >> "$DEPLOY_INFO_PATH"

          echo "# üöÄ Dernier d√©ploiement" > "$DEPLOY_INFO_PATH"
          echo "" >> "$DEPLOY_INFO_PATH"

          echo "## ‚Üí Suite √† push manuel" >> "$DEPLOY_INFO_PATH"
          echo "" >> "$DEPLOY_INFO_PATH"

          echo "| üìÖ Date        | üï∞Ô∏è Heure (Paris)       | üåê ISO 8601 UTC         | üî¢ Timestamp UNIX |" >> "$DEPLOY_INFO_PATH"
          echo "|----------------|------------------------|------------------------|--------------------|" >> "$DEPLOY_INFO_PATH"
          echo "| **$DATE_HUMAN**  | **$TIME_HUMAN**        | \`$DATE_ISO\`   | \`$DATE_UNIX\`       |" >> "$DEPLOY_INFO_PATH"
          echo "" >> "$DEPLOY_INFO_PATH"

          echo "### üìã Informations de d√©ploiement" >> "$DEPLOY_INFO_PATH"
          echo "" >> "$DEPLOY_INFO_PATH"
          echo "üìù Message Git : **${MSG}**<br>" >> "$DEPLOY_INFO_PATH"
          echo "üë§ Auteur : ${AUTOR}<br>" >> "$DEPLOY_INFO_PATH"
          echo "üîÅ SHA Commit : \`${SHA}\`<br>" >> "$DEPLOY_INFO_PATH"
          echo "üöÄ **D√©clencheur** : Push manuel sur la branche \`main\`" >> "$DEPLOY_INFO_PATH"
          echo "<br><br>" >> "$DEPLOY_INFO_PATH"

          echo "> ‚úÖ Ce d√©ploiement a √©t√© lanc√© automatiquement suite au push manuel sur \`main\` (Sans commit permanent du fichier deploy-info.md dans l'historique Git)." >> "$DEPLOY_INFO_PATH"

      - name: üåê Pr√©pare le fichier CNAME
        run: echo "pymox.fr" > docs/CNAME

      # - name: üåê Copie README.md
      #   run: cp README.md docs/README.md

      - name: üèóÔ∏è Build site MkDocs
        run: mkdocs build

      - name: üì¶ Injecte le log dans le site g√©n√©r√©
        run: |
          [ -f docs/outils/logs/deploy_info.md ] && cp docs/outils/logs/deploy_info.md site/outils/logs/deploy_info.md
          # [ -f docs/README.md ] && cp docs/README.md site/README.md

      - name: üöÄ D√©ploie vers gh-pages
        run: mkdocs gh-deploy --force
